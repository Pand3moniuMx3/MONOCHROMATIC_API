[
  {
    "id": 1,
    "category": "Basics",
    "path": "basics",
    "items": [
      {
        "title": "What is React?",
        "path": "what-is-react",
        "definition": "React is an extremely popular declarative, component-based, state-driven javascript library for building user interfaces. It's goal is to make syncing data and UI easier.",
        "examples": [],
        "docs": "https://react.dev/",
        "completed": false
      },
      {
        "title": "Project Setup",
        "path": "project-setup",
        "definition": "The most popular way of setting up a react project is by using 'create-react-app'. create-react-app is a complete starter kit for react applications. Simply run 'npx create-react-app project-name' the command prompt (alt. terminal on MacOS). Any app created this way automatically comes with a development server, a webpack for module bundling and important developer tools like ESLint, Prettier, and Jest.",
        "parameters": [
          {
            "parameter": "npx create-react-app",
            "explanation": "is the most popular starter kit for small react applications."
          }
        ],
        "examples": [
          {
            "image": "/project-setup/image-1.png",
            "explanation": "Open your command prompt (or terminal on Mac), navigate to the folder you want to create the app in, and run 'npx create-react-app' followed by the name of your project."
          },
          {
            "image": "/project-setup/image-2.png",
            "explanation": "After running the create command, Node.js will download all the necessary packages and set up the React project for you. Once this process is finished, you can open your project."
          },
          {
            "image": "/project-setup/image-3.png",
            "explanation": "The first thing you need to do after creating a new React project, is cleaning up the files a little. Open up the /public and /src folders, and delete the highlighted files, along with their imports."
          },
          {
            "image": "/project-setup/image-4.png",
            "explanation": "Next, move your existing src files into separate folders, like /components and /styles. Then update the imports and clean the index.js file up, so that it looks like this:"
          },
          {
            "image": "/project-setup/image-5.png",
            "explanation": "Right now, the App.js component is imported into the root, but doesn't really return anything. Let's fix that and write a simple React component function. Remember to export it."
          },
          {
            "image": "/project-setup/image-6.png",
            "explanation": "To start your application, open the VScode terminal and run the starting command. Since you made your app using 'create-react-app', the starting command will always be 'npm start'."
          }
        ],
        "docs": "https://react.dev/learn/start-a-new-react-project",
        "completed": false
      },
      {
        "title": "Components",
        "path": "components",
        "definition": "Components are regular JavaScript functions that describe a piece of the UI by returning JSX. It can be thought of as a “blueprint” or a “template”. Following React's separation of concerns, every Component includes its own state, logic and appearance.",
        "examples": [],
        "docs": "https://react.dev/reference/react/Component",
        "completed": false
      },
      {
        "title": "Instances",
        "path": "instances",
        "definition": "Instances are created when we use components. For example, when we have a specific component reused 4 times, there are 4 instances of this one component. They can be thought of as a physical manifestation of the component living in our component tree. Instances hold their own state and props.",
        "examples": [],
        "docs": "",
        "completed": false
      },
      {
        "title": "Elements",
        "path": "elements",
        "definition": "Elements are the result of using a component in our code. It's an immutable JavaScript object that React keeps in memory. It's HTML that will eventually be inserted into the DOM and become a DOM element.",
        "examples": [],
        "docs": "",
        "completed": false
      },
      {
        "title": "State",
        "path": "state",
        "definition": "State is a fundamental concept in React. It's an object that holds data or information about the component. It allows the component to remember and manage dynamic values that can change over time, like user input, fetched data, or just UI interactions. When the state of a component changes, React automatically re-renders the component and all of it's children and updates the UI to reflect the new state.",
        "examples": [],
        "docs": "https://legacy.reactjs.org/docs/state-and-lifecycle.html",
        "completed": false
      }
    ]
  },
  {
    "id": 2,
    "category": "State Management",
    "path": "state-management",
    "items": [
      {
        "title": "useState",
        "path": "usestate",
        "definition": "useState is a state management hook in React. It allows you to create a state variable, a function to update that variable, and an initial state value. The state variable is persistent across renders but is mutable only through the provided setter function. The state value can be of any type (e.g., string, number, object, array).",
        "parameters": [
          {
            "parameter": "initialState",
            "explanation": "The initial value of the state variable. It can be any data type, including primitive values (strings, numbers, booleans) or reference types (objects, arrays, functions)."
          }
        ],
        "returns": [
          {
            "parameter": "state",
            "explanation": "The current state value. This value is persistent across renders and can be used for things like UI interactions, conditional rendering, or storing data."
          },
          {
            "parameter": "set function",
            "explanation": "This function is tied to the state variable and lets you update it. It takes in a new state value or a function that receives the previous state and returns the updated state. The update triggers a re-render of the component"
          }
        ],
        "examples": [
          {
            "image": "/usestate/image-1.png",
            "explanation": "Create state variable and set function"
          },
          {
            "image": "/usestate/image-2.png",
            "explanation": "The state variable can be of any type: a string, a number, an array, etc."
          },
          {
            "image": "/usestate/image-3.png",
            "explanation": "Change the state by calling the set function with a new value. In this example, the set function is called directly inside a button's onClick handler. Upon clicking the button, the state updates."
          },
          {
            "image": "/usestate/image-4.png",
            "explanation": "Now you can use the state variable inside your JSX and, for example, display it on the screen."
          },
          {
            "image": "/usestate/image-5.png",
            "explanation": "You can go a step further and create a boolean state variable for conditional rendering or a UI toggle element."
          }
        ],
        "docs": "https://react.dev/reference/react/useState",
        "completed": false
      },
      {
        "title": "useReducer",
        "path": "usereducer",
        "definition": "useRecuder is a React hook used for managing complex state logic. It is an alternative to useState when state transitions involve multiple sub-states or complex updates. It works by maintaining a state object and updating it through a reducer function, which takes the current state and an action and returns a new state.",
        "parameters": [
          {
            "parameter": "initialState",
            "explanation": "is the initial value of the state variable. It is often an object but can be of any type."
          },
          {
            "parameter": "reducer",
            "explanation": "is a pure function that takes in two arguments: the current state and an action object. It determines how the state should be updated based on the action type."
          }
        ],
        "returns": [
          {
            "parameter": "current state",
            "explanation": "is a state variable in the form of an object. It can be used for UI interactions, conditional rendering, storing fetched data, etc."
          },
          {
            "parameter": "dispatch",
            "explanation": "function used for sending actions to the reducer, triggering a state update."
          }
        ],
        "examples": [
          {
            "image": "/usereducer/image-1.png",
            "explanation": "Create the state object and dispatch function, and pass in the reducer and initialState"
          },
          {
            "image": "/usereducer/image-2.png",
            "explanation": "Define the initial state and pass it into the useReducer hook. This sets up the starting state for your component."
          },
          {
            "image": "/usereducer/image-3.png",
            "explanation": "Create the reducer function, which receives the current state and an action as arguments. The reducer contains all state logic and returns an updated state. In this example, a switch statement is used to define different actions and their corresponding state updates."
          },
          {
            "image": "/usereducer/image-4.png",
            "explanation": "Trigger a state update by calling the dispatch function with a specified action. If all state update logic is handled inside the reducer, simply dispatching the action type will apply the corresponding update."
          },
          {
            "image": "/usereducer/image-5.png",
            "explanation": "Display your state in JSX. Remember, in this example state returned by the reducer function is an object."
          },
          {
            "image": "/usereducer/image-6.png",
            "explanation": "If you want, you can even update multiple state variables simulatenously. This makes useReducer better than useState for handling complex state logic."
          }
        ],
        "docs": "https://react.dev/reference/react/useReducer",
        "completed": false
      }
    ]
  },
  {
    "id": 3,
    "category": "Context API",
    "path": "context-api",
    "items": [
      {
        "title": "createContext",
        "path": "createcontext",
        "definition": "createContext lets you create a place to store and distribute your state globally, also called a Context, that components can provide or consume.",
        "parameters": [
          {
            "parameter": "defaultValue",
            "explanation": "the default value will be returned by the context if there is no matching context provider."
          }
        ],
        "returns": [
          {
            "parameter": "Context.Provider",
            "explanation": "By wrapping your components into a context Provider and passing them in as a children prop, you allow them to use the state within the context. It needs a value prop which specifies what state the provider is supposed to broadcast."
          }
        ],
        "examples": [
          {
            "image": "/createcontext/image-1.png",
            "explanation": "Create the context. Simply enought, you only have to give it a name."
          },
          {
            "image": "/createcontext/image-2.png",
            "explanation": "If you need, you can define a default value that the Context will be mounted with."
          },
          {
            "image": "/createcontext/image-3.png",
            "explanation": "To broadcast the context (state) globally, create a Context.Provider. If you need to access said state inside a component, wrap it into the Context.Provider. This is important - otherwise the component won't be able to access the global state."
          }
        ],
        "docs": "https://react.dev/reference/react/createContext",
        "completed": false
      },
      {
        "title": "useContext",
        "path": "usecontext",
        "definition": "useContext is a special hook with the goal of reading state from a Context.Provider. It can be called inside any component that's wrapped into a Context.Provider.",
        "parameters": [
          {
            "parameter": "SomeContext",
            "explanation": "Since there can be numerous contexts in one application, you have to pass the name of a specific context into the useContext hook."
          }
        ],
        "returns": [
          {
            "parameter": "state object",
            "explanation": "After specifying what context the useContext hook is supposed to read, it will return state specified in the Context.Provider's 'value'"
          }
        ],
        "examples": [
          {
            "image": "/usecontext/image-1.png",
            "explanation": "To access global state, import useContext and a Context object into your component, and destructure it."
          }
        ],
        "docs": "https://react.dev/reference/react/useContext",
        "completed": false
      }
    ]
  },
  {
    "id": 4,
    "category": "Effects",
    "path": "effects",
    "items": [
      {
        "title": "useEffect",
        "path": "useeffect",
        "definition": "the useEffect hook lets you synchronise function triggers with state updates. Unlike normal functions, it can produce side effects. This is why it's usually used white fetching data from an external API.",
        "parameters": [
          {
            "parameter": "setup",
            "explanation": "Setup is the function with your effect's logic. In other words, it's the code that the useEffect hook will run every time it's triggered."
          },
          {
            "parameter": "dependency array",
            "explanation": "The dependency array specifies when the useEffect hook is supposed to run. If empty, the dependency array will run any functions inside the hook on mount. The dependency array takes in variables, which will trigger the effect upon changing."
          }
        ],
        "examples": [
          {
            "image": "/useeffect/image-1.png",
            "explanation": "Create an effect. Include the setup function and the dependency array."
          },
          {
            "image": "/useeffect/image-2.png",
            "explanation": "The prime goal of an effect is to run some code when triggered. Write that code in the setup function. in React, the useEffect hook is popular for handling fetch requests (see example). The dependency array is still empty, so the effect will run and fetch the data only oncem on the initial mount."
          },
          {
            "image": "/useeffect/image-2.png",
            "explanation": "As you can see in the example, we added a search functionality to our effect. Now, the data should be re-fetched every time the query changes, right? We can do that by including the query state variable inside the dependency array. In other words, the effect will run on mount and every time the query state updates."
          }
        ],
        "docs": "https://react.dev/reference/react/useEffect",
        "completed": false
      }
    ]
  },
  {
    "id": 5,
    "category": "Refs",
    "path": "refs",
    "items": [
      {
        "title": "useRef",
        "path": "useref",
        "definition": "the useRef hook lets you create and reference a state variable that doesn't change throughout renders.",
        "parameters": [
          {
            "parameter": "initialValue",
            "explanation": "The initial value of the state variable. It can be any type of value."
          }
        ],
        "returns": [
          {
            "parameter": "current",
            "explanation": "A mutable property that is initially set to the initialValue passed into the hook. It will not change during re-renders, unless you change it to something else manually."
          }
        ],
        "examples": [
          {
            "image": "/useref/image-1.png",
            "explanation": "Create a ref and give it a default value. The ref will be mounted with this value."
          },
          {
            "image": "/useref/image-2.png",
            "explanation": "The ref object can be referenced through it's 'current' property. It works just like state, with doesn't trigger a re-render when updated. We can leverage this in a Click Counter component. The handleClick function updates the ref value, but doesn't re-render the component while doing so."
          }
        ],
        "docs": "https://react.dev/reference/react/useRef",
        "completed": false
      }
    ]
  },
  {
    "id": 6,
    "category": "Performance",
    "path": "performance",
    "items": [
      {
        "title": "useMemo",
        "path": "usememo",
        "definition": "",
        "examples": [],
        "docs": "https://react.dev/reference/react/useMemo",
        "completed": false
      },
      {
        "title": "useCallback",
        "path": "usecallback",
        "definition": "",
        "examples": [],
        "docs": "https://react.dev/reference/react/useCallback",
        "completed": false
      },
      {
        "title": "useTransition",
        "path": "usetransition",
        "definition": "",
        "examples": [],
        "docs": "https://react.dev/reference/react/useTransition",
        "completed": false
      }
    ]
  }
]
